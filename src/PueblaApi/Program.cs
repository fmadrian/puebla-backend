
using System.Text;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using PueblaApi.Database;
using PueblaApi.Entities;
using PueblaApi.Helpers;
using PueblaApi.Repositories;
using PueblaApi.Repositories.Interfaces;
using PueblaApi.Services;
using PueblaApi.Services.Interfaces;
using PueblaApi.Settings;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();

#region Web client settings
WebClientSettings webClientSettings = builder.Configuration.GetSection(nameof(WebClientSettings)).Get<WebClientSettings>();
builder.Services.AddSingleton<WebClientSettings>(webClientSettings);
#endregion

#region JWT configuration
// Inject JWT configuration.
JwtConfiguration jwtConfiguration = builder.Configuration.GetSection(nameof(JwtConfiguration)).Get<JwtConfiguration>();
builder.Services.AddSingleton<JwtConfiguration>(jwtConfiguration);

// Define token validation parameters.
byte[] key = Encoding.ASCII.GetBytes(jwtConfiguration.Secret);
TokenValidationParameters tokenValidationParameters = new TokenValidationParameters()
{
    // Allows us to verify, the token we are receiving was generated by our application and not a random token.
    // For each token we receive, we validate: 

    ValidateIssuerSigningKey = true, // Check the key that is being used to encrypt/decrypt token.
    IssuerSigningKey = new SymmetricSecurityKey(key), // Key that will be used to compare the key received in the token.

    ValidateIssuer = true,
    ValidateAudience = true,

    ValidIssuer = jwtConfiguration.Issuer,
    ValidAudience = jwtConfiguration.Audience,

    RequireExpirationTime = true,

    ValidateLifetime = true // Validates for how long the token lives

};

//	Inject authentication through Bearer tokens (JWT).
builder.Services.AddAuthentication(options =>
{
    options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme; // We'll use JWT Bearer default authentication scheme.
    options.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;
    options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme; // To validate (challenge) a request we'll use JWT Bearer default scheme.
}
).AddJwtBearer(
    jwt =>
    {
        jwt.SaveToken = true; // Header inside request when authentication is successful.
        jwt.TokenValidationParameters = tokenValidationParameters;

    });

// 6. Inject TokenValidationParameters as a singleton.
builder.Services.AddSingleton(tokenValidationParameters);
#endregion


#region Identity Framework
// Connect the IdentityUser with the ApplicationDbContext.
// Fixes issue: Unable to resolve service for type 'Microsoft.AspNetCore.Identity.UserManager`1[Microsoft.AspNetCore.Identity.IdentityUser]'
// By adding IdentityRole we're telling Identity framework, we want to embed roles inside the Identity.
builder.Services.AddIdentity<ApplicationUser, IdentityRole>(
    options =>
    {
        options.SignIn.RequireConfirmedEmail = true; // Require to confirm email for the new accounts.
    }
).AddEntityFrameworkStores<ApplicationDbContext>();
#endregion

#region DB Context

var dbSettings = builder.Configuration.GetSection(nameof(DbSettings)).Get<DbSettings>();
builder.Services.AddDbContext<ApplicationDbContext>(options => options.UseNpgsql(dbSettings.ConnectionString));
#endregion


#region Administrator user configuration
AdminUserConfiguration adminUserConfiguration = builder.Configuration.GetSection(nameof(AdminUserConfiguration)).Get<AdminUserConfiguration>();
builder.Services.AddSingleton<AdminUserConfiguration>(adminUserConfiguration);
#endregion

#region Email configuration and email service (Singleton)
EmailConfiguration emailConfiguration = builder.Configuration.GetSection(nameof(EmailConfiguration)).Get<EmailConfiguration>();
builder.Services.AddSingleton<EmailConfiguration>(emailConfiguration);
// Add email service.
builder.Services.AddSingleton<IEmailService, EmailService>();
#endregion

#region Image service configuration and image service (Singleton)

ImageServiceConfiguration imageServiceConfiguration = builder.Configuration.GetSection(nameof(ImageServiceConfiguration)).Get<ImageServiceConfiguration>();
builder.Services.AddSingleton<ImageServiceConfiguration>(imageServiceConfiguration);
// Add image service.
builder.Services.AddSingleton<IImageService, ImageService>();
#endregion

#region CORS configuration
// Add a default CORS policy.
// https://learn.microsoft.com/en-us/aspnet/core/security/cors
builder.Services.AddCors(options =>
{
    options.AddDefaultPolicy(
        policy =>
        {
            //policy.WithOrigins("http://localhost:4200")
            policy.AllowAnyOrigin()
                .AllowAnyHeader() // Allow all headers.
                .AllowAnyMethod()
                .WithExposedHeaders("Authorization");
            // .WithMethods("OPTIONS", "POST", "PUT", "DELETE", "GET"); // HTTP methods allowed.
        });
});
#endregion

#region AutoMapper
builder.Services.AddAutoMapper(typeof(Program));
#endregion


#region Repositories
builder.Services.AddScoped<IEmailConfirmationCodeRepository, EmailConfirmationCodeRepository>();
builder.Services.AddScoped<IMovieRepository, MovieRepository>();
builder.Services.AddScoped<IStudioRepository, StudioRepository>();
builder.Services.AddScoped<ICategoryRepository, CategoryRepository>();
#endregion

var app = builder.Build();

#region Seed user and roles

// Initialize (seed data in) the database
// TODO: Add flag to only seed the data the first time the app is deployed.
// await DbInitializer.InitDb(app);

#endregion

// Configure the HTTP request pipeline.
/*if (app.Environment.IsDevelopment())
{
}*/

// Use default cors configuration.
app.UseCors();

app.UseHttpsRedirection();

app.UseAuthorization();

app.MapControllers();

app.Run();
